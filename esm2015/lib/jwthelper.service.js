import { Inject, Injectable } from '@angular/core';
import { decodeToken, getTokenExpirationDate, isTokenExpired } from './jwt-utils';
import { JWT_OPTIONS } from './jwtoptions.token';
function nullGetter() {
    return null;
}
export class JwtHelperService {
    constructor(config = {}) {
        this.tokenGetter = config.tokenGetter || nullGetter;
    }
    decodeToken(token = this.tokenGetter()) {
        if (token instanceof Promise) {
            return token.then((tokenValue) => decodeToken(tokenValue));
        }
        if (!token || token === '') {
            return null;
        }
        return decodeToken(token);
    }
    getTokenExpirationDate(token = this.tokenGetter()) {
        if (token instanceof Promise) {
            return token.then(decodeToken)
                .then((tokenValue) => getTokenExpirationDate(tokenValue));
        }
        return getTokenExpirationDate(decodeToken(token));
    }
    isTokenExpired(token = this.tokenGetter(), offsetSeconds) {
        if (token instanceof Promise) {
            return token.then((tokenValue) => this.isTokenExpired(tokenValue, offsetSeconds));
        }
        if (!token || token === '') {
            return true;
        }
        return isTokenExpired(token, offsetSeconds);
    }
    // @deprecated
    getAuthScheme(authScheme, request) {
        if (typeof authScheme === 'function') {
            return authScheme(request);
        }
        return authScheme;
    }
}
JwtHelperService.decorators = [
    { type: Injectable }
];
JwtHelperService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [JWT_OPTIONS,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0aGVscGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWp3dC9zcmMvbGliL2p3dGhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVqRCxTQUFTLFVBQVU7SUFDakIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBR0QsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUFpQyxTQUFvQixFQUFFO1FBQ3JELElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsSUFBSSxVQUFVLENBQUM7SUFDdEQsQ0FBQztJQUlNLFdBQVcsQ0FDaEIsUUFBa0MsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUVwRCxJQUFJLEtBQUssWUFBWSxPQUFPLEVBQUU7WUFDNUIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBa0IsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFJTSxzQkFBc0IsQ0FDM0IsUUFBa0MsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUVwRCxJQUFJLEtBQUssWUFBWSxPQUFPLEVBQUU7WUFDNUIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztpQkFDakIsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FDbkIsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQ25DLENBQUM7U0FDZjtRQUVELE9BQU8sc0JBQXNCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUlNLGNBQWMsQ0FDbkIsUUFBa0MsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUNwRCxhQUFzQjtRQUV0QixJQUFJLEtBQUssWUFBWSxPQUFPLEVBQUU7WUFDNUIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBa0IsRUFBRSxFQUFFLENBQ3ZDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUMvQyxDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sY0FBYyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsY0FBYztJQUNQLGFBQWEsQ0FDbEIsVUFBeUMsRUFDekMsT0FBeUI7UUFFekIsSUFBSSxPQUFPLFVBQVUsS0FBSyxVQUFVLEVBQUU7WUFDcEMsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDNUI7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDOzs7WUFwRUYsVUFBVTs7OzRDQUlJLE1BQU0sU0FBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEp3dENvbmZpZyB9IGZyb20gJ2FuZ3VsYXItand0L2xpYi9hbmd1bGFyLWp3dC5tb2R1bGUnO1xuaW1wb3J0IHsgVG9rZW5HZXR0ZXIgfSBmcm9tICdhbmd1bGFyLWp3dC9saWIvand0LmludGVyY2VwdG9yJztcbmltcG9ydCB7IGRlY29kZVRva2VuLCBnZXRUb2tlbkV4cGlyYXRpb25EYXRlLCBpc1Rva2VuRXhwaXJlZCB9IGZyb20gJy4vand0LXV0aWxzJztcbmltcG9ydCB7IEpXVF9PUFRJT05TIH0gZnJvbSAnLi9qd3RvcHRpb25zLnRva2VuJztcblxuZnVuY3Rpb24gbnVsbEdldHRlcigpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBKd3RIZWxwZXJTZXJ2aWNlIHtcbiAgdG9rZW5HZXR0ZXI6IFRva2VuR2V0dGVyO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoSldUX09QVElPTlMpIGNvbmZpZzogSnd0Q29uZmlnID0ge30pIHtcbiAgICB0aGlzLnRva2VuR2V0dGVyID0gY29uZmlnLnRva2VuR2V0dGVyIHx8IG51bGxHZXR0ZXI7XG4gIH1cblxuICBwdWJsaWMgZGVjb2RlVG9rZW4odG9rZW46IHN0cmluZyk6IGFueTtcbiAgcHVibGljIGRlY29kZVRva2VuKHRva2VuOiBQcm9taXNlPHN0cmluZz4pOiBQcm9taXNlPGFueT47XG4gIHB1YmxpYyBkZWNvZGVUb2tlbihcbiAgICB0b2tlbjogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+ID0gdGhpcy50b2tlbkdldHRlcigpXG4gICk6IGFueSB8IFByb21pc2U8YW55PiB7XG4gICAgaWYgKHRva2VuIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgcmV0dXJuIHRva2VuLnRoZW4oKHRva2VuVmFsdWU6IHN0cmluZykgPT4gZGVjb2RlVG9rZW4odG9rZW5WYWx1ZSkpO1xuICAgIH1cblxuICAgIGlmICghdG9rZW4gfHwgdG9rZW4gPT09ICcnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVjb2RlVG9rZW4odG9rZW4pO1xuICB9XG5cbiAgcHVibGljIGdldFRva2VuRXhwaXJhdGlvbkRhdGUodG9rZW46IHN0cmluZyk6IERhdGUgfCBudWxsO1xuICBwdWJsaWMgZ2V0VG9rZW5FeHBpcmF0aW9uRGF0ZSh0b2tlbjogUHJvbWlzZTxzdHJpbmc+KTogUHJvbWlzZTxEYXRlIHwgbnVsbD47XG4gIHB1YmxpYyBnZXRUb2tlbkV4cGlyYXRpb25EYXRlKFxuICAgIHRva2VuOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4gPSB0aGlzLnRva2VuR2V0dGVyKClcbiAgKTogRGF0ZSB8IG51bGwgfCBQcm9taXNlPERhdGUgfCBudWxsPiB7XG4gICAgaWYgKHRva2VuIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgcmV0dXJuIHRva2VuLnRoZW4oZGVjb2RlVG9rZW4pXG4gICAgICAgICAgICAgICAgICAudGhlbigodG9rZW5WYWx1ZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgZ2V0VG9rZW5FeHBpcmF0aW9uRGF0ZSh0b2tlblZhbHVlKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0VG9rZW5FeHBpcmF0aW9uRGF0ZShkZWNvZGVUb2tlbih0b2tlbikpO1xuICB9XG5cbiAgcHVibGljIGlzVG9rZW5FeHBpcmVkKHRva2VuOiBzdHJpbmcsIG9mZnNldFNlY29uZHM/OiBudW1iZXIpOiBib29sZWFuO1xuICBwdWJsaWMgaXNUb2tlbkV4cGlyZWQodG9rZW46IFByb21pc2U8c3RyaW5nPiwgb2Zmc2V0U2Vjb25kcz86IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj47XG4gIHB1YmxpYyBpc1Rva2VuRXhwaXJlZChcbiAgICB0b2tlbjogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+ID0gdGhpcy50b2tlbkdldHRlcigpLFxuICAgIG9mZnNldFNlY29uZHM/OiBudW1iZXJcbiAgKTogYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICh0b2tlbiBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgIHJldHVybiB0b2tlbi50aGVuKCh0b2tlblZhbHVlOiBzdHJpbmcpID0+XG4gICAgICAgIHRoaXMuaXNUb2tlbkV4cGlyZWQodG9rZW5WYWx1ZSwgb2Zmc2V0U2Vjb25kcylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlbiB8fCB0b2tlbiA9PT0gJycpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBpc1Rva2VuRXhwaXJlZCh0b2tlbiwgb2Zmc2V0U2Vjb25kcyk7XG4gIH1cblxuICAvLyBAZGVwcmVjYXRlZFxuICBwdWJsaWMgZ2V0QXV0aFNjaGVtZShcbiAgICBhdXRoU2NoZW1lOiBGdW5jdGlvbiB8IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICByZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+XG4gICk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBhdXRoU2NoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gYXV0aFNjaGVtZShyZXF1ZXN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXV0aFNjaGVtZTtcbiAgfVxufVxuIl19