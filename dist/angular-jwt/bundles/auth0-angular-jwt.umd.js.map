{"version":3,"file":"auth0-angular-jwt.umd.js","sources":["../../../projects/angular-jwt/src/lib/jwt-utils.ts","../../../projects/angular-jwt/src/lib/jwtoptions.token.ts","../../../projects/angular-jwt/src/lib/jwthelper.service.ts","../../../projects/angular-jwt/src/lib/jwt.interceptor.ts","../../../projects/angular-jwt/src/lib/angular-jwt.module.ts","../../../projects/angular-jwt/src/index.ts","../../../projects/angular-jwt/src/auth0-angular-jwt.ts"],"sourcesContent":["export function getTokenExpirationDate(decoded: any): Date | null {\n  if (!decoded || !decoded.hasOwnProperty('exp')) {\n    return null;\n  }\n\n  const date = new Date(0);\n  date.setUTCSeconds(decoded.exp);\n\n  return date;\n}\n\nexport function decodeToken(tokenValue: string) {\n  const parts = tokenValue.split('.');\n\n  if (parts.length !== 3) {\n    throw new Error(\n      'The inspected token doesn\\'t appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.'\n    );\n  }\n\n  const decoded = urlBase64Decode(parts[1]);\n  if (!decoded) {\n    throw new Error('Cannot decode the token.');\n  }\n\n  return JSON.parse(decoded);\n}\n\nexport function isTokenExpired(token: string, offsetSeconds: number = 0): boolean {\n  const date = getTokenExpirationDate(token);\n\n  if (date === null) {\n    return false;\n  }\n\n  return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n}\n\n\n// tslint:disable:no-bitwise\n\n// credits for decoder goes to https://github.com/atk\nfunction b64decode(str: string): string {\n  const chars =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  let output = '';\n\n  str = String(str).replace(/=+$/, '');\n\n  if (str.length % 4 === 1) {\n    throw new Error(\n      '\\'atob\\' failed: The string to be decoded is not correctly encoded.'\n    );\n  }\n\n  for (\n    // initialize result and counters\n    let bc = 0, bs: any, buffer: any, idx = 0;\n    // get next character\n    (buffer = str.charAt(idx++));\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer &&\n    ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n    bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\nfunction b64DecodeUnicode(str: any) {\n  return decodeURIComponent(\n    Array.prototype.map\n         .call(b64decode(str), (c: any) => {\n           return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n         })\n         .join('')\n  );\n}\n\nfunction urlBase64Decode(str: string): string {\n  let output = str.replace(/-/g, '+').replace(/_/g, '/');\n  switch (output.length % 4) {\n    case 0: {\n      break;\n    }\n    case 2: {\n      output += '==';\n      break;\n    }\n    case 3: {\n      output += '=';\n      break;\n    }\n    default: {\n      throw new Error('Illegal base64url string!');\n    }\n  }\n  return b64DecodeUnicode(output);\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const JWT_OPTIONS = new InjectionToken('JWT_OPTIONS');\n","import { HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { JwtConfig } from 'angular-jwt/lib/angular-jwt.module';\nimport { TokenGetter } from 'angular-jwt/lib/jwt.interceptor';\nimport { decodeToken, getTokenExpirationDate, isTokenExpired } from './jwt-utils';\nimport { JWT_OPTIONS } from './jwtoptions.token';\n\nfunction nullGetter() {\n  return null;\n}\n\n@Injectable()\nexport class JwtHelperService {\n  tokenGetter: TokenGetter;\n\n  constructor(@Inject(JWT_OPTIONS) config: JwtConfig = {}) {\n    this.tokenGetter = config.tokenGetter || nullGetter;\n  }\n\n  public decodeToken(token: string): any;\n  public decodeToken(token: Promise<string>): Promise<any>;\n  public decodeToken(\n    token: string | Promise<string> = this.tokenGetter()\n  ): any | Promise<any> {\n    if (token instanceof Promise) {\n      return token.then((tokenValue: string) => decodeToken(tokenValue));\n    }\n\n    if (!token || token === '') {\n      return null;\n    }\n\n    return decodeToken(token);\n  }\n\n  public getTokenExpirationDate(token: string): Date | null;\n  public getTokenExpirationDate(token: Promise<string>): Promise<Date | null>;\n  public getTokenExpirationDate(\n    token: string | Promise<string> = this.tokenGetter()\n  ): Date | null | Promise<Date | null> {\n    if (token instanceof Promise) {\n      return token.then(decodeToken)\n                  .then((tokenValue) =>\n                    getTokenExpirationDate(tokenValue)\n                  );\n    }\n\n    return getTokenExpirationDate(decodeToken(token));\n  }\n\n  public isTokenExpired(token: string, offsetSeconds?: number): boolean;\n  public isTokenExpired(token: Promise<string>, offsetSeconds?: number): Promise<boolean>;\n  public isTokenExpired(\n    token: string | Promise<string> = this.tokenGetter(),\n    offsetSeconds?: number\n  ): boolean | Promise<boolean> {\n    if (token instanceof Promise) {\n      return token.then((tokenValue: string) =>\n        this.isTokenExpired(tokenValue, offsetSeconds)\n      );\n    }\n\n    if (!token || token === '') {\n      return true;\n    }\n\n    return isTokenExpired(token, offsetSeconds);\n  }\n\n  // @deprecated\n  public getAuthScheme(\n    authScheme: Function | string | undefined,\n    request: HttpRequest<any>\n  ): string {\n    if (typeof authScheme === 'function') {\n      return authScheme(request);\n    }\n\n    return authScheme;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { isTokenExpired } from 'angular-jwt/lib/jwt-utils';\nimport { from, Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { JwtHelperService } from './jwthelper.service';\nimport { JWT_OPTIONS } from './jwtoptions.token';\n\nexport type TokenGetter = (request?: HttpRequest<any>) => string | null | Promise<string | null>;\nexport type AuthScheme = string | ((request?: HttpRequest<any>) => string);\n\nexport function getAuthScheme(\n  authScheme: AuthScheme,\n  request: HttpRequest<any>\n): string {\n  if (typeof authScheme === 'function') {\n    return authScheme(request);\n  }\n\n  return authScheme;\n}\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  tokenGetter: TokenGetter;\n  headerName: string;\n  authScheme: AuthScheme;\n  allowedDomains: Array<string | RegExp>;\n  disallowedRoutes: Array<string | RegExp>;\n  throwNoTokenError: boolean;\n  skipWhenExpired: boolean;\n  standardPorts: string[] = ['80', '443'];\n\n  constructor(\n    @Inject(JWT_OPTIONS) config: any,\n    public jwtHelper: JwtHelperService,\n    @Inject(DOCUMENT) private document: Document\n  ) {\n    this.tokenGetter = config.tokenGetter;\n    this.headerName = config.headerName || 'Authorization';\n    this.authScheme =\n      config.authScheme || config.authScheme === ''\n        ? config.authScheme\n        : 'Bearer ';\n    this.allowedDomains = config.allowedDomains || [];\n    this.disallowedRoutes = config.disallowedRoutes || [];\n    this.throwNoTokenError = config.throwNoTokenError || false;\n    this.skipWhenExpired = config.skipWhenExpired;\n  }\n\n  isAllowedDomain(request: HttpRequest<any>): boolean {\n    const requestUrl: URL = new URL(request.url, this.document.location.origin);\n\n    // If the host equals the current window origin,\n    // the domain is allowed by default\n    if (requestUrl.host === this.document.location.host) {\n      return true;\n    }\n\n    // If not the current domain, check the allowed list\n    const hostName = `${requestUrl.hostname}${\n      requestUrl.port && !this.standardPorts.includes(requestUrl.port)\n        ? ':' + requestUrl.port\n        : ''\n    }`;\n\n    return (\n      this.allowedDomains.findIndex((domain) =>\n        typeof domain === 'string'\n          ? domain === hostName\n          : domain instanceof RegExp\n          ? domain.test(hostName)\n          : false\n      ) > -1\n    );\n  }\n\n  isDisallowedRoute(request: HttpRequest<any>): boolean {\n    const requestedUrl: URL = new URL(\n      request.url,\n      this.document.location.origin\n    );\n\n    return (\n      this.disallowedRoutes.findIndex((route: string | RegExp) => {\n        if (typeof route === 'string') {\n          const parsedRoute: URL = new URL(\n            route,\n            this.document.location.origin\n          );\n          return (\n            parsedRoute.hostname === requestedUrl.hostname &&\n            parsedRoute.pathname === requestedUrl.pathname\n          );\n        }\n\n        if (route instanceof RegExp) {\n          return route.test(request.url);\n        }\n\n        return false;\n      }) > -1\n    );\n  }\n\n  private handleInterception(\n    token: string | null,\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authScheme = getAuthScheme(this.authScheme, request);\n    let tokenIsExpired = false;\n\n    if (!token && this.throwNoTokenError) {\n      throw new Error('Could not get token from tokenGetter function.');\n    }\n\n    if (this.skipWhenExpired) {\n      tokenIsExpired = token ? isTokenExpired(token) : true;\n    }\n\n    if (token && tokenIsExpired && this.skipWhenExpired) {\n      request = request.clone();\n    } else if (token) {\n      request = request.clone({\n        setHeaders: {\n          [this.headerName]: `${authScheme}${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.isAllowedDomain(request) || this.isDisallowedRoute(request)) {\n      return next.handle(request);\n    }\n\n    const token = this.tokenGetter(request);\n\n    if (token instanceof Promise) {\n      return from(token).pipe(\n        mergeMap((asyncToken: string | null) => {\n          return this.handleInterception(asyncToken, request, next);\n        })\n      );\n    } else {\n      return this.handleInterception(token, request, next);\n    }\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Optional,\n  SkipSelf,\n  Provider,\n} from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthScheme, JwtInterceptor, TokenGetter } from './jwt.interceptor';\nimport { JWT_OPTIONS } from './jwtoptions.token';\nimport { JwtHelperService } from './jwthelper.service';\n\nexport interface JwtConfig {\n  tokenGetter?: TokenGetter;\n  headerName?: string;\n  authScheme?: AuthScheme;\n  allowedDomains?: Array<string | RegExp>;\n  disallowedRoutes?: Array<string | RegExp>;\n  throwNoTokenError?: boolean;\n  skipWhenExpired?: boolean;\n}\n\nexport interface JwtModuleOptions {\n  jwtOptionsProvider?: Provider;\n  config?: JwtConfig;\n}\n\n@NgModule()\nexport class JwtModule {\n  constructor(@Optional() @SkipSelf() parentModule: JwtModule) {\n    if (parentModule) {\n      throw new Error(\n        'JwtModule is already loaded. It should only be imported in your application\\'s main module.'\n      );\n    }\n  }\n\n  static forRoot(options: JwtModuleOptions): ModuleWithProviders<JwtModule> {\n    return {\n      ngModule: JwtModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: JwtInterceptor,\n          multi: true\n        },\n        options.jwtOptionsProvider || {\n          provide: JWT_OPTIONS,\n          useValue: options.config\n        },\n        JwtHelperService\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of angular-jwt\n */\n\nexport * from './lib/jwt.interceptor';\nexport * from './lib/jwthelper.service';\nexport * from './lib/jwtoptions.token';\nexport * from './lib/angular-jwt.module';\nexport * from './lib/jwt-utils';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["InjectionToken","Injectable","Inject","isTokenExpired","from","mergeMap","DOCUMENT","HTTP_INTERCEPTORS","NgModule","Optional","SkipSelf"],"mappings":"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"}